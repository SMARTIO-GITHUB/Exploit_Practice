080484e4 <main>:
 80484e4:	55                   	push   ebp			//スタックフレームの退避
 80484e5:	89 e5                	mov    ebp,esp			//EBPを調整
 80484e7:	57                   	push   edi			//実はこの２つは変数ではなく、
 80484e8:	56                   	push   esi			//ediとesiを計算用の変数として使うための退避
 80484e9:	83 e4 f0             	and    esp,0xfffffff0		//アライメント（調整）
 80484ec:	81 ec 90 00 00 00    	sub    esp,0x90			//ここからが変数の宣言のようなもの
 80484f2:	65 a1 14 00 00 00    	mov    eax,gs:0x14		//BOF対策、カナリア値を設定
 80484f8:	89 84 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],eax	//esp+0x8cはカナリア値を設定する
 80484ff:	31 c0                	xor    eax,eax			//eaxクリア
//printf("input: ");
 8048501:	b8 e0 86 04 08       	mov    eax,0x80486e0		
 8048506:	89 04 24             	mov    DWORD PTR [esp],eax
 8048509:	e8 b2 fe ff ff       	call   80483c0 <printf@plt>
//scanf("%d",&hyaku);
 804850e:	b8 e8 86 04 08       	mov    eax,0x80486e8
 8048513:	8d 54 24 1c          	lea    edx,[esp+0x1c]
 8048517:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
 804851b:	89 04 24             	mov    DWORD PTR [esp],eax
 804851e:	e8 fd fe ff ff       	call   8048420 <__isoc99_scanf@plt>
//if(hyaku == 100)
 8048523:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
 8048527:	83 f8 64             	cmp    eax,0x64
 804852a:	75 0e                	jne    804853a <main+0x56>
//printf("hyaku(makoto)\n");  //printf関数の中に型指定変換子がない場合は、printfはputsに置き換えられる
 804852c:	c7 04 24 eb 86 04 08 	mov    DWORD PTR [esp],0x80486eb
 8048533:	e8 a8 fe ff ff       	call   80483e0 <puts@plt>
 8048538:	eb 0c                	jmp    8048546 <main+0x62>
//puts("I don't know(makoto)");
 804853a:	c7 04 24 f9 86 04 08 	mov    DWORD PTR [esp],0x80486f9
 8048541:	e8 9a fe ff ff       	call   80483e0 <puts@plt>
//printf("input: ");
 8048546:	b8 e0 86 04 08       	mov    eax,0x80486e0
 804854b:	89 04 24             	mov    DWORD PTR [esp],eax
 804854e:	e8 6d fe ff ff       	call   80483c0 <printf@plt>
scanf("%d", &buri);
 8048553:	b8 e8 86 04 08       	mov    eax,0x80486e8
 8048558:	8d 54 24 20          	lea    edx,[esp+0x20]
 804855c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
 8048560:	89 04 24             	mov    DWORD PTR [esp],eax
 8048563:	e8 b8 fe ff ff       	call   8048420 <__isoc99_scanf@plt>

 8048568:	c7 44 24 24 00 00 00 	mov    DWORD PTR [esp+0x24],0x0//変数iの初期化
 804856f:	00 
 8048570:	eb 12                	jmp    8048584 <main+0xa0>
//printf("buri");
 8048572:	b8 0e 87 04 08       	mov    eax,0x804870e
 8048577:	89 04 24             	mov    DWORD PTR [esp],eax
 804857a:	e8 41 fe ff ff       	call   80483c0 <printf@plt>
//esp+0x24は変数i、esp+20はburi変数
 804857f:	83 44 24 24 01       	add    DWORD PTR [esp+0x24],0x1
 8048584:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
 8048588:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
 804858c:	7c e4                	jl     8048572 <main+0x8e>//前のアドレスに飛ぶ
//printf("\n"); //putcharに置き換えられてる
 804858e:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
 8048595:	e8 76 fe ff ff       	call   8048410 <putchar@plt>
//printf("Call me(masuda)\n")
 804859a:	c7 04 24 13 87 04 08 	mov    DWORD PTR [esp],0x8048713
 80485a1:	e8 3a fe ff ff       	call   80483e0 <puts@plt>
//scanf("%s",masuda);
 80485a6:	b8 23 87 04 08       	mov    eax,0x8048723
 80485ab:	8d 54 24 28          	lea    edx,[esp+0x28]
 80485af:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
 80485b3:	89 04 24             	mov    DWORD PTR [esp],eax
 80485b6:	e8 65 fe ff ff       	call   8048420 <__isoc99_scanf@plt>
//while(strcmp(masuda, "masudakuuuuuuun") != 0);
 80485bb:	8d 44 24 28          	lea    eax,[esp+0x28]
 80485bf:	89 c2                	mov    edx,eax
 80485c1:	b8 26 87 04 08       	mov    eax,0x8048726
 80485c6:	b9 10 00 00 00       	mov    ecx,0x10
 80485cb:	89 d6                	mov    esi,edx
 80485cd:	89 c7                	mov    edi,eax
 80485cf:	f3 a6                	repz cmps BYTE PTR ds:[esi],BYTE PTR es:[edi]
 80485d1:	0f 97 c2             	seta   dl
 80485d4:	0f 92 c0             	setb   al
 80485d7:	89 d1                	mov    ecx,edx
 80485d9:	28 c1                	sub    cl,al
 80485db:	89 c8                	mov    eax,ecx
 80485dd:	0f be c0             	movsx  eax,al
 80485e0:	85 c0                	test   eax,eax
 80485e2:	75 b6                	jne    804859a <main+0xb6>
//BOF対策、ここは特に気にしなくていい
 80485e4:	b8 00 00 00 00       	mov    eax,0x0
 80485e9:	8b b4 24 8c 00 00 00 	mov    esi,DWORD PTR [esp+0x8c]
 80485f0:	65 33 35 14 00 00 00 	xor    esi,DWORD PTR gs:0x14
 80485f7:	74 05                	je     80485fe <main+0x11a>
 80485f9:	e8 d2 fd ff ff       	call   80483d0 <__stack_chk_fail@plt>
 80485fe:	8d 65 f8             	lea    esp,[ebp-0x8]
 8048601:	5e                   	pop    esi
 8048602:	5f                   	pop    edi
 8048603:	5d                   	pop    ebp
 8048604:	c3                   	ret    
